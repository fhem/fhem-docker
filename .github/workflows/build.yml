# This is a basic workflow to help you get started with Actions

name: Build and Test

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the dev branch
  push:
    branches:
    - "dev*"  # Support wildcard matching

  pull_request:
    branches: [ dev ]

  release:
    types: # This configuration does not affect the page_build event above
      - published
      - released

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test_build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: [Dockerfile, Dockerfile-bullseye]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@3.6.0

      - name: Get git vars
        shell: bash
        run: |
          echo "::set-output name=IMAGE_VERSION::$( git describe --tags --dirty --match "v[0-9]*")"
        id: gitVars

      - name: Prepare SVN repository checkout and variables
        id: prepareSVN
        uses: ./.github/workflows/prepare-svn

      - name: Prepare docker for build and publish
        id: prepareDOCKER
        uses: ./.github/workflows/prepare-docker
        with:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          GHCR_OWNER: ${{ github.repository_owner }} 
          GHCR_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}   
          DOCKERFILE: ${{ matrix.dockerfile }}
          CACHE_PATH: '/tmp/.buildx-cache'

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/fhem/fhem-docker
            fhem/fhem
          flavor: |
              latest= ${{ fromJSON('["auto", "false"]')[github.event.release.prerelease == 1] }}
          tags: |
            type=semver,pattern={{version}},suffix=${{ fromJSON('["-bullseye", "-buster"]')[endsWith(matrix.dockerfile, 'Dockerfile')] }}
            type=semver,pattern={{major}},enable=${{ github.event.release.prerelease == 0 }},suffix=${{ fromJSON('["-bullseye", "-buster"]')[endsWith(matrix.dockerfile, 'Dockerfile')] }}
            type=ref,event=branch,suffix=${{ fromJSON('["-bullseye", "-buster"]')[endsWith(matrix.dockerfile, 'Dockerfile')] }}
            type=ref,event=pr,suffix=${{ fromJSON('["-bullseye", "-buster"]')[endsWith(matrix.dockerfile, 'Dockerfile')] }}


      - name: Build for test full blown amd64 
        uses: docker/build-push-action@v2
        id: docker_build
        with:
          context: .
          load: true  
          file: ./${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            IMAGE_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            IMAGE_VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            ALEXAFHEM_VERSION=0.5.61
            L_USAGE=${{ github.server_url }}/${{ github.repository }}/blob/${{ github.sha }}/README.md
            L_VCS_URL=${{ github.server_url }}/${{ github.repository }}/
            L_AUTHORS=${{ github.server_url }}/${{ github.repository }}/graphs/contributors
            FHEM_VERSION=${{ steps.prepareSVN.outputs.VARIANT_FHEM }}
            VCS_REF=${{ steps.prepareSVN.outputs.FHEM_REVISION_LATEST }}
            IMAGE_LAYER_SYS_EXT=1
            IMAGE_LAYER_PERL_EXT=1
            IMAGE_LAYER_DEV=1
            IMAGE_LAYER_PERL_CPAN=1
            IMAGE_LAYER_PERL_CPAN_EXT=1
            IMAGE_LAYER_PYTHON=1
            IMAGE_LAYER_PYTHON_EXT=1
            IMAGE_LAYER_NODEJS=1
            IMAGE_LAYER_NODEJS_EXT=0

      - name: Inspect and run integration tests
        run: |
          docker image inspect ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          ./scripts/test-integration.sh;

      - name: Run build in unittests
        run: |
          CONTAINER=$(docker run -d -ti --health-interval=10s --health-timeout=8s --health-start-period=10s --health-retries=5 -e CPAN_PKGS=Test2::Suite ${{ fromJSON(steps.meta.outputs.json).tags[0] }} )
          sleep 15;
          until [ "$(/usr/bin/docker inspect -f {{.State.Health.Status}} $CONTAINER)" == "healthy" ]; 
          do sleep 1;
          echo -n "."; 
          done;
          echo -e "\n"
          docker exec ${CONTAINER} /bin/bash -c 'prove --recurse /opt/fhem/t/FHEM' || true
          docker container rm $CONTAINER --force --volumes

  published_build:
    runs-on: ubuntu-latest
    needs: test_build
    strategy:
      matrix:
        dockerfile: [Dockerfile, Dockerfile-bullseye]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@3.6.0

      - name: Get git vars
        shell: bash
        run: |
          echo "::set-output name=IMAGE_VERSION::$( git describe --tags --dirty --match "v[0-9]*")"
        id: gitVars

      - name: Prepare SVN repository checkout and variables
        id: prepareSVN
        uses: ./.github/workflows/prepare-svn

      - name: Prepare docker for build and publish
        id: prepareDOCKER
        uses: ./.github/workflows/prepare-docker
        with:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          GHCR_OWNER: ${{ github.repository_owner }} 
          GHCR_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}   
          DOCKERFILE: ${{ matrix.dockerfile }}
          CACHE_PATH: '/tmp/.buildx-cache'
          CACHE_TAG: "full"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/fhem/fhem-docker
            fhem/fhem
          flavor: |
              latest= ${{ fromJSON('["auto", "false"]')[github.event.release.prerelease == 1] }}
          tags: |
            type=semver,pattern={{version}},suffix=${{ fromJSON('["-bullseye", "-buster"]')[endsWith(matrix.dockerfile, 'Dockerfile')] }}
            type=semver,pattern={{major}},enable=${{ github.event.release.prerelease == 0 }},suffix=${{ fromJSON('["-bullseye", "-buster"]')[endsWith(matrix.dockerfile, 'Dockerfile')] }}
            type=ref,event=branch,suffix=${{ fromJSON('["-bullseye", "-buster"]')[endsWith(matrix.dockerfile, 'Dockerfile')] }}
            type=ref,event=pr,suffix=${{ fromJSON('["-bullseye", "-buster"]')[endsWith(matrix.dockerfile, 'Dockerfile')] }}

      - name: Build and push cross compiled full blown image on supported platforms
        uses: docker/build-push-action@v2
        id: docker_build
        with:
          context: .
          load: false  
          file: ./${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            IMAGE_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            IMAGE_VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            ALEXAFHEM_VERSION=0.5.61
            L_USAGE=${{ github.server_url }}/${{ github.repository }}/blob/${{ github.sha }}/README.md
            L_VCS_URL=${{ github.server_url }}/${{ github.repository }}/
            L_AUTHORS=${{ github.server_url }}/${{ github.repository }}/graphs/contributors
            FHEM_VERSION=${{ steps.buildVars.outputs.VARIANT_FHEM }}
            VCS_REF=${{ steps.svnVars.outputs.FHEM_REVISION_LATEST }}
            IMAGE_LAYER_SYS_EXT=1
            IMAGE_LAYER_PERL_EXT=1
            IMAGE_LAYER_DEV=1
            IMAGE_LAYER_PERL_CPAN=1
            IMAGE_LAYER_PERL_CPAN_EXT=1
            IMAGE_LAYER_PYTHON=1
            IMAGE_LAYER_PYTHON_EXT=1
            IMAGE_LAYER_NODEJS=1
            IMAGE_LAYER_NODEJS_EXT=0
            L_DESCR=A full blown Docker image for FHEM house automation system, based on Debian Bullseye.

      - name: Docker meta
        id: meta_base
        uses: docker/metadata-action@v3
        with:
          images: |
             ghcr.io/${{ github.repository_owner }}/fhem/fhem-minimal-docker
             fhem/fhem-minimal
          flavor: |
             latest= ${{ fromJSON('["auto", "false"]')[github.event.release.prerelease == 1] }}
          tags: |
            type=semver,pattern={{version}},suffix=${{ fromJSON('["-bullseye", "-buster"]')[endsWith(matrix.dockerfile, 'Dockerfile')] }}
            type=semver,pattern={{major}},enable=${{ github.event.release.prerelease == 0 }},suffix=${{ fromJSON('["-bullseye", "-buster"]')[endsWith(matrix.dockerfile, 'Dockerfile')] }}
            type=ref,event=branch,suffix=${{ fromJSON('["-bullseye", "-buster"]')[endsWith(matrix.dockerfile, 'Dockerfile')] }}
            type=ref,event=pr,suffix=${{ fromJSON('["-bullseye", "-buster"]')[endsWith(matrix.dockerfile, 'Dockerfile')] }}

      - name: Build and push cross compiled base image on supported platforms
        uses: docker/build-push-action@v2
        id: docker_build_base
        with:
          context: .
          load: false  
          file: ./${{ matrix.dockerfile }}
          platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          tags: ${{ steps.meta_base.outputs.tags }}
          labels: ${{ steps.meta_base.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            IMAGE_VERSION=${{ fromJSON(steps.meta_base.outputs.json).labels['org.opencontainers.image.version'] }}
            IMAGE_VCS_REF=${{ fromJSON(steps.meta_base.outputs.json).labels['org.opencontainers.image.revision'] }}
            L_USAGE=${{ github.server_url }}/${{ github.repository }}/blob/${{ github.sha }}/README.md
            L_VCS_URL=${{ github.server_url }}/${{ github.repository }}/
            L_AUTHORS=${{ github.server_url }}/${{ github.repository }}/graphs/contributors
            FHEM_VERSION=${{ steps.buildVars.outputs.VARIANT_FHEM }}
            VCS_REF=${{ steps.svnVars.outputs.FHEM_REVISION_LATEST }}
            IMAGE_LAYER_SYS_EXT=0
            IMAGE_LAYER_PERL_EXT=1
            IMAGE_LAYER_DEV=0
            IMAGE_LAYER_PERL_CPAN=1
            IMAGE_LAYER_PERL_CPAN_EXT=0
            IMAGE_LAYER_PYTHON=0
            IMAGE_LAYER_PYTHON_EXT=0
            IMAGE_LAYER_NODEJS=0
            IMAGE_LAYER_NODEJS_EXT=0
            L_DESCR=A minimal (perl) Docker image for FHEM house automation system, based on Debian Bullseye.

        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
